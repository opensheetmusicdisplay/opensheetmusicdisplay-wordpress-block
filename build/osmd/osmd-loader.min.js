(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("opensheetmusicdisplay"));
	else if(typeof define === 'function' && define.amd)
		define(["opensheetmusicdisplay"], factory);
	else if(typeof exports === 'object')
		exports["opensheetmusicdisplay-wordpress-block"] = factory(require("opensheetmusicdisplay"));
	else
		root["opensheetmusicdisplay-wordpress-block"] = factory(root["opensheetmusicdisplay"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const opensheetmusicdisplay_1 = __webpack_require__(2);
function FindOSMDCanvasElement(osmdRenderBlock) {
    let renderCanvas = undefined;
    for (const nextChild of osmdRenderBlock.getElementsByTagName('div')) {
        if (nextChild.id.startsWith('osmdCanvas')) {
            renderCanvas = nextChild;
            break;
        }
    }
    return renderCanvas;
}
function FindOrCreateMessageBlock(osmdRenderBlock) {
    let message = osmdRenderBlock.getElementsByClassName('phonicscore-opensheetmusicdisplay__message-block')[0];
    if (!message) {
        message = document.createElement('div');
        message.classList.add('phonicscore-opensheetmusicdisplay__message-block');
        const messageHeading = document.createElement('h4');
        message.appendChild(messageHeading);
        const messageDetails = document.createElement('p');
        message.appendChild(messageDetails);
        osmdRenderBlock.appendChild(message);
    }
    return message;
}
function DisplayError(osmdRenderBlock, error, details) {
    const renderCanvas = FindOSMDCanvasElement(osmdRenderBlock);
    const messageBlock = FindOrCreateMessageBlock(osmdRenderBlock);
    const messageHeading = messageBlock.getElementsByTagName('h4')[0];
    messageHeading.innerText = error;
    const messageDetails = messageBlock.getElementsByTagName('p')[0];
    messageDetails.innerText = details;
    if (renderCanvas) {
        renderCanvas.remove();
    }
}
const MAX_RELOAD_ATTEMPTS = 5;
const placeholders = document.getElementsByClassName('phonicscore-opensheetmusicdisplay__placeholder');
for (let i = 0; i < placeholders.length; i++) {
    const currentPlaceholder = placeholders[i];
    const urlElement = currentPlaceholder.getElementsByClassName('musicXmlUrl')[0];
    if (!urlElement || !urlElement.value) {
        continue;
    }
    const url = urlElement.value;
    urlElement.remove();
    const osmdRenderBlock = currentPlaceholder.getElementsByClassName('phonicscore-opensheetmusicdisplay__render-block')[0];
    if (!osmdRenderBlock) {
        continue;
    }
    const loader = currentPlaceholder.getElementsByClassName('phonicscore-opensheetmusicdisplay__loading-spinner')[0];
    loader.classList.remove('hide');
    const zoomElement = currentPlaceholder.getElementsByClassName('zoom')[0];
    let zoom = 1.0;
    if (zoomElement && zoomElement.value) {
        zoom = parseFloat(zoomElement.value);
        if (zoom === NaN || zoom === undefined) {
            zoom = 1.0;
        }
    }
    zoomElement.remove();
    const aspectRatioElement = currentPlaceholder.getElementsByClassName('aspectRatio')[0];
    let aspectRatioAsFloat = 0.0;
    if (aspectRatioElement && aspectRatioElement.value) {
        aspectRatioAsFloat = parseFloat(aspectRatioElement.value);
        if (aspectRatioAsFloat === NaN || aspectRatioAsFloat === undefined) {
            aspectRatioAsFloat = 0.0;
        }
    }
    aspectRatioElement.remove();
    const updateHeight = () => {
        let height = 'auto';
        if (aspectRatioAsFloat > 0.0 && currentPlaceholder.offsetWidth) {
            height = (currentPlaceholder.offsetWidth / aspectRatioAsFloat).toString() + 'px';
        }
        currentPlaceholder.style.height = height;
    };
    updateHeight();
    const attributeElementList = currentPlaceholder.getElementsByTagName('input');
    let optionsObject = {};
    for (let j = 0; j < attributeElementList.length; j++) {
        let value = attributeElementList[j].value.toString();
        let type = attributeElementList[j].getAttribute('attributeType');
        switch (type) {
            case 'boolean':
                if (value === 'true') {
                    value = true;
                }
                else {
                    value = false;
                }
                break;
            case 'number':
                let num = parseFloat(value);
                if (num === NaN) {
                    num = parseInt(value);
                }
                if (num !== NaN) {
                    value = num;
                }
                else {
                    value = undefined;
                }
                break;
            case 'array':
            case 'object':
                if (value !== 'undefined') {
                    try {
                        value = JSON.parse(value);
                    }
                    catch (error) {
                        value = undefined;
                        console.warn("Couldn't parse object or array attribute: " + attributeElementList[j].name);
                    }
                }
                break;
            default: //string, undefined
                if (!value || value === '') {
                    value = undefined;
                }
                break;
        }
        if (value === 'undefined') {
            value = undefined;
        }
        optionsObject[attributeElementList[j].name] = value;
    }
    const currentOsmd = new opensheetmusicdisplay_1.OpenSheetMusicDisplay(osmdRenderBlock, optionsObject);
    let loadAttempt = 0;
    let loadFailed = false;
    const loadBehavior = () => {
        loadAttempt++;
        currentOsmd.load(url).then(() => {
            currentOsmd.Zoom = zoom;
            try {
                currentOsmd.render();
            }
            catch (err) {
                console.warn(err);
                DisplayError(osmdRenderBlock, 'Error loading sheet music file: ' + url, err);
            }
            finally {
                loader.classList.add('hide');
                loadAttempt = 0;
            }
        }, function (err) {
            console.warn(err);
            if (loadAttempt < MAX_RELOAD_ATTEMPTS) {
                console.warn("Error loading. Attempting reload...");
                loadBehavior();
            }
            else {
                DisplayError(osmdRenderBlock, 'Error loading sheet music file: ' + url, err);
                loader.classList.add('hide');
                loadAttempt = 0;
                loadFailed = true;
            }
        });
    };
    loadBehavior();
    let currentContainerWidth = osmdRenderBlock.offsetWidth;
    let timeoutObject = undefined;
    const resizeEvent = () => {
        if (loadFailed) {
            return;
        }
        const prevWidth = currentContainerWidth;
        currentContainerWidth = osmdRenderBlock.offsetWidth;
        if (currentContainerWidth === prevWidth) {
            return;
        }
        loader.classList.remove('hide');
        const renderCanvas = FindOSMDCanvasElement(osmdRenderBlock);
        renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.remove();
        clearTimeout(timeoutObject);
        timeoutObject = setTimeout(() => {
            updateHeight();
            currentOsmd.Zoom = zoom;
            try {
                currentOsmd.render();
            }
            catch (err) {
                console.warn(err);
                DisplayError(osmdRenderBlock, 'Error loading sheet music file: ' + url, err);
            }
            finally {
                loader.classList.add('hide');
            }
        }, 500);
    };
    if (ResizeObserver) {
        const resizeObserver = new ResizeObserver(entries => {
            resizeEvent();
        });
        resizeObserver.observe(osmdRenderBlock);
    }
    else {
        console.info("Browser doesn't support ResizeObserver, defaulting to window resize");
        window.addEventListener('resize', (event) => {
            resizeEvent();
        });
    }
}


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__2__;

/***/ })
/******/ ]);
});